# Autogenerated configuration file template
#################################
# allow-axfr-ips	Allow zonetransfers only to these subnets
#
# allow-axfr-ips=127.0.0.0/8,::1

#################################
# allow-dnsupdate-from	A global setting to allow DNS updates from these IP ranges.
#
# allow-dnsupdate-from=127.0.0.0/8,::1

#################################
# allow-notify-from	Allow AXFR NOTIFY from these IP ranges. If empty, drop all incoming notifies.
#
# allow-notify-from=0.0.0.0/0,::/0

#################################
# allow-recursion	List of subnets that are allowed to recurse
#
# allow-recursion=0.0.0.0/0

#################################
# also-notify	When notifying a domain, also notify these nameservers
#
# also-notify=

#################################
# any-to-tcp	Answer ANY queries with tc=1, shunting to TCP
#
# any-to-tcp=no

#################################
# cache-ttl	Seconds to store packets in the PacketCache
#
# cache-ttl=20

#################################
# carbon-interval	Number of seconds between carbon (graphite) updates
#
# carbon-interval=30

#################################
# carbon-ourname	If set, overrides our reported hostname for carbon stats
#
# carbon-ourname=

#################################
# carbon-server	If set, send metrics in carbon (graphite) format to this server
#
# carbon-server=

#################################
# chroot	If set, chroot to this directory for more security
#
# chroot=

#################################
# config-dir	Location of configuration directory (pdns.conf)
#
# config-dir=/usr/local/etc

#################################
# config-name	Name of this virtual configuration - will rename the binary image
#
# config-name=

#################################
# control-console	Debugging switch - don't use
#
# control-console=no

#################################
# daemon	Operate as a daemon
#
daemon=no

#################################
# default-ksk-algorithms	Default KSK algorithms
#
# default-ksk-algorithms=rsasha256

#################################
# default-ksk-size	Default KSK size (0 means default)
#
# default-ksk-size=0

#################################
# default-soa-mail	mail address to insert in the SOA record if none set in the backend
#
# default-soa-mail=

#################################
# default-soa-name	name to insert in the SOA record if none set in the backend
#
# default-soa-name=a.misconfigured.powerdns.server

#################################
# default-ttl	Seconds a result is valid if not set otherwise
#
# default-ttl=3600

#################################
# default-zsk-algorithms	Default ZSK algorithms
#
# default-zsk-algorithms=rsasha256

#################################
# default-zsk-size	Default ZSK size (0 means default)
#
# default-zsk-size=0

#################################
# direct-dnskey	Fetch DNSKEY RRs from backend during DNSKEY synthesis
#
# direct-dnskey=no

#################################
# disable-axfr	Disable zonetransfers but do allow TCP queries
#
# disable-axfr=no

#################################
# disable-axfr-rectify	Disable the rectify step during an outgoing AXFR. Only required for regression testing.
#
# disable-axfr-rectify=no

#################################
# disable-tcp	Do not listen to TCP queries
#
# disable-tcp=no

#################################
# distributor-threads	Default number of Distributor (backend) threads to start
#
# distributor-threads=3

#################################
# do-ipv6-additional-processing	Do AAAA additional processing
#
# do-ipv6-additional-processing=yes

#################################
# edns-subnet-processing	If we should act on EDNS Subnet options
#
# edns-subnet-processing=no

#################################
# entropy-source	If set, read entropy from this file
#
# entropy-source=/dev/urandom

#################################
# experimental-api-key	REST API Static authentication key (required for API use)
#
# experimental-api-key=

#################################
# experimental-api-readonly	If the JSON API should disallow data modification
#
# experimental-api-readonly=no

#################################
# experimental-dname-processing	If we should support DNAME records
#
# experimental-dname-processing=no

#################################
# experimental-dnsupdate	Enable/Disable DNS update (RFC2136) support. Default is no.
#
# experimental-dnsupdate=no

#################################
# experimental-json-interface	If the webserver should serve JSON data
#
# experimental-json-interface=no

#################################
# experimental-logfile	Filename of the log file for JSON parser
#
# experimental-logfile=/var/log/pdns.log

#################################
# experimental-lua-policy-script	Lua script for the policy engine
#
# experimental-lua-policy-script=

#################################
# forward-dnsupdate	A global setting to allow DNS update packages that are for a Slave domain, to be forwarded to the master.
#
# forward-dnsupdate=yes

#################################
# godbc-activate-domain-key-query	
#
# godbc-activate-domain-key-query=update cryptokeys set active=1 where domain_id=(select id from domains where name=?) and  cryptokeys.id=?

#################################
# godbc-add-domain-key-query	
#
# godbc-add-domain-key-query=insert into cryptokeys (domain_id, flags, active, content) select id, ?, ?, ? from domains where name=?

#################################
# godbc-any-id-query	Any with ID query
#
# godbc-any-id-query=SELECT content,ttl,prio,type,domain_id,disabled,name,auth FROM records WHERE disabled=0 and name=? and domain_id=?

#################################
# godbc-any-query	Any query
#
# godbc-any-query=SELECT content,ttl,prio,type,domain_id,disabled,name,auth FROM records WHERE disabled=0 and name=?

#################################
# godbc-basic-query	Basic query
#
# godbc-basic-query=SELECT content,ttl,prio,type,domain_id,disabled,name,auth FROM records WHERE disabled=0 and type=? and name=?

#################################
# godbc-clear-domain-all-keys-query	
#
# godbc-clear-domain-all-keys-query=delete from cryptokeys where domain_id=(select id from domains where name=?)

#################################
# godbc-clear-domain-all-metadata-query	
#
# godbc-clear-domain-all-metadata-query=delete from domainmetadata where domain_id=(select id from domains where name=?)

#################################
# godbc-clear-domain-metadata-query	
#
# godbc-clear-domain-metadata-query=delete from domainmetadata where domain_id=(select id from domains where name=?) and domainmetadata.kind=?

#################################
# godbc-datasource	Datasource (DSN) to use
#
# godbc-datasource=PowerDNS

#################################
# godbc-deactivate-domain-key-query	
#
# godbc-deactivate-domain-key-query=update cryptokeys set active=0 where domain_id=(select id from domains where name=?) and  cryptokeys.id=?

#################################
# godbc-delete-comment-rrset-query	
#
# godbc-delete-comment-rrset-query=DELETE FROM comments WHERE domain_id=? AND name=? AND type=?

#################################
# godbc-delete-comments-query	
#
# godbc-delete-comments-query=DELETE FROM comments WHERE domain_id=?

#################################
# godbc-delete-domain-query	
#
# godbc-delete-domain-query=delete from domains where name=?

#################################
# godbc-delete-empty-non-terminal-query	delete empty non-terminal from zone
#
# godbc-delete-empty-non-terminal-query=delete from records where domain_id=? and name=? and type is null

#################################
# godbc-delete-names-query	
#
# godbc-delete-names-query=delete from records where domain_id=? and name=?

#################################
# godbc-delete-rrset-query	
#
# godbc-delete-rrset-query=delete from records where domain_id=? and name=? and type=?

#################################
# godbc-delete-tsig-key-query	
#
# godbc-delete-tsig-key-query=delete from tsigkeys where name=?

#################################
# godbc-delete-zone-query	
#
# godbc-delete-zone-query=delete from records where domain_id=?

#################################
# godbc-dnssec	Enable DNSSEC processing
#
# godbc-dnssec=no

#################################
# godbc-get-all-domain-metadata-query	
#
# godbc-get-all-domain-metadata-query=select kind,content from domains, domainmetadata where domainmetadata.domain_id=domains.id and name=?

#################################
# godbc-get-all-domains-query	Retrieve all domains
#
# godbc-get-all-domains-query=select domains.id, domains.name, records.content, domains.type, domains.master, domains.notified_serial, domains.last_check, domains.account from domains LEFT JOIN records ON records.domain_id=domains.id AND records.type='SOA' AND records.name=domains.name WHERE records.disabled=0 OR records.disabled=?

#################################
# godbc-get-domain-metadata-query	
#
# godbc-get-domain-metadata-query=select content from domains, domainmetadata where domainmetadata.domain_id=domains.id and name=? and domainmetadata.kind=?

#################################
# godbc-get-order-after-query	DNSSEC Ordering Query, after
#
# godbc-get-order-after-query=select convert(varchar(255), min(ordername)) from records where ordername > convert(varbinary(255),?) and domain_id=? and disabled=0 and ordername is not null

#################################
# godbc-get-order-before-query	DNSSEC Ordering Query, before
#
# godbc-get-order-before-query=select top 1 convert(varchar(255), ordername), name from records where ordername <= convert(varbinary(255),?) and domain_id=? and disabled=0 and ordername is not null order by 1 desc

#################################
# godbc-get-order-first-query	DNSSEC Ordering Query, first
#
# godbc-get-order-first-query=select top 1 convert(varchar(255), ordername), name from records where domain_id=? and disabled=0 and ordername is not null order by 1 asc

#################################
# godbc-get-order-last-query	DNSSEC Ordering Query, last
#
# godbc-get-order-last-query=select top 1 convert(varchar(255), ordername), name from records where ordername != convert(varbinary(255),'') and domain_id=? and disabled=0 and ordername is not null order by 1 desc

#################################
# godbc-get-tsig-key-query	
#
# godbc-get-tsig-key-query=select algorithm, secret from tsigkeys where name=?

#################################
# godbc-get-tsig-keys-query	
#
# godbc-get-tsig-keys-query=select name,algorithm, secret from tsigkeys

#################################
# godbc-id-query	Basic with ID query
#
# godbc-id-query=SELECT content,ttl,prio,type,domain_id,disabled,name,auth FROM records WHERE disabled=0 and type=? and name=? and domain_id=?

#################################
# godbc-info-all-master-query	
#
# godbc-info-all-master-query=select id,name,master,last_check,notified_serial,type from domains where type='MASTER'

#################################
# godbc-info-all-slaves-query	
#
# godbc-info-all-slaves-query=select id,name,master,last_check,type from domains where type='SLAVE'

#################################
# godbc-info-zone-query	
#
# godbc-info-zone-query=select id,name,master,last_check,notified_serial,type,account from domains where name=?

#################################
# godbc-insert-comment-query	
#
# godbc-insert-comment-query=INSERT INTO comments (domain_id, name, type, modified_at, account, comment) VALUES (?, ?, ?, ?, ?, ?)

#################################
# godbc-insert-empty-non-terminal-query	insert empty non-terminal in zone
#
# godbc-insert-empty-non-terminal-query=insert into records (domain_id,name,type,disabled,auth) values (?,?,null,0,1)

#################################
# godbc-insert-ent-order-query	insert empty non-terminal in zone
#
# godbc-insert-ent-order-query=insert into records (type,domain_id,disabled,name,ordername,auth) values (null,?,0,?,convert(varbinary(255),?),?)

#################################
# godbc-insert-ent-query	insert empty non-terminal in zone
#
# godbc-insert-ent-query=insert into records (type,domain_id,disabled,name,auth) values (null,?,0,?,?)

#################################
# godbc-insert-record-order-query	
#
# godbc-insert-record-order-query=insert into records (content,ttl,prio,type,domain_id,disabled,name,ordername,auth) values (?,?,?,?,?,?,?,convert(varbinary(255),?),?)

#################################
# godbc-insert-record-query	
#
# godbc-insert-record-query=insert into records (content,ttl,prio,type,domain_id,disabled,name,auth) values (?,?,?,?,?,?,?,?)

#################################
# godbc-insert-slave-query	
#
# godbc-insert-slave-query=insert into domains (type,name,master,account) values('SLAVE',?,?,?)

#################################
# godbc-insert-zone-query	
#
# godbc-insert-zone-query=insert into domains (type,name) values('NATIVE',?)

#################################
# godbc-list-comments-query	
#
# godbc-list-comments-query=SELECT domain_id,name,type,modified_at,account,comment FROM comments WHERE domain_id=?

#################################
# godbc-list-domain-keys-query	
#
# godbc-list-domain-keys-query=select cryptokeys.id, flags, active, content from domains, cryptokeys where cryptokeys.domain_id=domains.id and name=?

#################################
# godbc-list-query	AXFR query
#
# godbc-list-query=SELECT content,ttl,prio,type,domain_id,disabled,name,auth FROM records WHERE (disabled=0 OR disabled=?) and domain_id=? order by name, type

#################################
# godbc-list-subzone-query	Subzone listing
#
# godbc-list-subzone-query=SELECT content,ttl,prio,type,domain_id,disabled,name,auth FROM records WHERE disabled=0 and (name=? OR name like ?) and domain_id=?

#################################
# godbc-master-zone-query	Data
#
# godbc-master-zone-query=select master from domains where name=? and type='SLAVE'

#################################
# godbc-nullify-ordername-and-auth-query	DNSSEC nullify ordername and auth query
#
# godbc-nullify-ordername-and-auth-query=update records set ordername=NULL,auth=0 where name=? and type=? and domain_id=? and disabled=0

#################################
# godbc-nullify-ordername-and-update-auth-query	DNSSEC nullify ordername and update auth query
#
# godbc-nullify-ordername-and-update-auth-query=update records set ordername=NULL,auth=? where domain_id=? and name=? and disabled=0

#################################
# godbc-password	Password to connect with
#
# godbc-password=

#################################
# godbc-remove-domain-key-query	
#
# godbc-remove-domain-key-query=delete from cryptokeys where domain_id=(select id from domains where name=?) and cryptokeys.id=?

#################################
# godbc-remove-empty-non-terminals-from-zone-query	remove all empty non-terminals from zone
#
# godbc-remove-empty-non-terminals-from-zone-query=delete from records where domain_id=? and type is null

#################################
# godbc-set-auth-on-ds-record-query	DNSSEC set auth on a DS record
#
# godbc-set-auth-on-ds-record-query=update records set auth=1 where domain_id=? and name=? and type='DS' and disabled=0

#################################
# godbc-set-domain-metadata-query	
#
# godbc-set-domain-metadata-query=insert into domainmetadata (domain_id, kind, content) select id, ?, ? from domains where name=?

#################################
# godbc-set-order-and-auth-query	DNSSEC set ordering query
#
# godbc-set-order-and-auth-query=update records set ordername=convert(varbinary(255),?),auth=? where name=? and domain_id=? and disabled=0

#################################
# godbc-set-tsig-key-query	
#
# godbc-set-tsig-key-query=insert into tsigkeys (name,algorithm,secret) values(?,?,?)

#################################
# godbc-supermaster-name-to-ips	
#
# godbc-supermaster-name-to-ips=select ip,account from supermasters where nameserver=? and account=?

#################################
# godbc-supermaster-query	
#
# godbc-supermaster-query=select account from supermasters where ip=? and nameserver=?

#################################
# godbc-update-account-query	
#
# godbc-update-account-query=update domains set account=? where name=?

#################################
# godbc-update-kind-query	
#
# godbc-update-kind-query=update domains set type=? where name=?

#################################
# godbc-update-lastcheck-query	
#
# godbc-update-lastcheck-query=update domains set last_check=? where id=?

#################################
# godbc-update-master-query	
#
# godbc-update-master-query=update domains set master=? where name=?

#################################
# godbc-update-serial-query	
#
# godbc-update-serial-query=update domains set notified_serial=? where id=?

#################################
# godbc-username	User to connect as
#
# godbc-username=powerdns

#################################
# godbc-zone-lastchange-query	
#
# godbc-zone-lastchange-query=select max(change_date) from records where domain_id=?

#################################
# guardian	Run within a guardian process
#
# guardian=no

#################################
# include-dir	Include *.conf files from this directory
#
# include-dir=

#################################
# launch	Which backends to launch and order to query them in
#
launch=godbc
godbc-datasource=pdns-sqlite3

#################################
# load-modules	Load this module - supply absolute or relative path
#
# load-modules=

#################################
# local-address	Local IP addresses to which we bind
#
# local-address=0.0.0.0

#################################
# local-address-nonexist-fail	Fail to start if one or more of the local-address's do not exist on this server
#
# local-address-nonexist-fail=yes

#################################
# local-ipv6	Local IP address to which we bind
#
# local-ipv6=

#################################
# local-ipv6-nonexist-fail	Fail to start if one or more of the local-ipv6 addresses do not exist on this server
#
# local-ipv6-nonexist-fail=yes

#################################
# local-port	The port on which we listen
#
local-port=5400

#################################
# log-dns-details	If PDNS should log DNS non-erroneous details
#
log-dns-details=yes

#################################
# log-dns-queries	If PDNS should log all incoming DNS queries
#
log-dns-queries=yes

#################################
# logging-facility	Log under a specific facility
#
# logging-facility=

#################################
# loglevel	Amount of logging. Higher is more. Do not set below 3
#
loglevel=9

#################################
# lua-prequery-script	Lua script with prequery handler (DO NOT USE)
#
# lua-prequery-script=

#################################
# master	Act as a master
#
# master=no

#################################
# max-cache-entries	Maximum number of cache entries
#
# max-cache-entries=1000000

#################################
# max-ent-entries	Maximum number of empty non-terminals in a zone
#
# max-ent-entries=100000

#################################
# max-nsec3-iterations	Limit the number of NSEC3 hash iterations
#
# max-nsec3-iterations=500

#################################
# max-queue-length	Maximum queuelength before considering situation lost
#
# max-queue-length=5000

#################################
# max-signature-cache-entries	Maximum number of signatures cache entries
#
# max-signature-cache-entries=

#################################
# max-tcp-connections	Maximum number of TCP connections
#
# max-tcp-connections=10

#################################
# module-dir	Default directory for modules
#
# module-dir=/usr/local/lib/pdns

#################################
# negquery-cache-ttl	Seconds to store negative query results in the QueryCache
#
# negquery-cache-ttl=60

#################################
# no-shuffle	Set this to prevent random shuffling of answers - for regression testing
#
# no-shuffle=off

#################################
# non-local-bind	Enable binding to non-local addresses by using FREEBIND / BINDANY socket options
#
# non-local-bind=no

#################################
# only-notify	Only send AXFR NOTIFY to these IP addresses or netmasks
#
# only-notify=0.0.0.0/0,::/0

#################################
# out-of-zone-additional-processing	Do out of zone additional processing
#
# out-of-zone-additional-processing=yes

#################################
# overload-queue-length	Maximum queuelength moving to packetcache only
#
# overload-queue-length=0

#################################
# pipebackend-abi-version	Version of the pipe backend ABI
#
# pipebackend-abi-version=1

#################################
# prevent-self-notification	Don't send notifications to what we think is ourself
#
# prevent-self-notification=yes

#################################
# query-cache-ttl	Seconds to store query results in the QueryCache
#
# query-cache-ttl=20

#################################
# query-local-address	Source IP address for sending queries
#
# query-local-address=0.0.0.0

#################################
# query-local-address6	Source IPv6 address for sending queries
#
# query-local-address6=::

#################################
# query-logging	Hint backends that queries should be logged
#
# query-logging=no

#################################
# queue-limit	Maximum number of milliseconds to queue a query
#
# queue-limit=1500

#################################
# receiver-threads	Default number of receiver threads to start
#
# receiver-threads=1

#################################
# recursive-cache-ttl	Seconds to store packets for recursive queries in the PacketCache
#
# recursive-cache-ttl=10

#################################
# recursor	If recursion is desired, IP address of a recursing nameserver
#
# recursor=no

#################################
# retrieval-threads	Number of AXFR-retrieval threads for slave operation
#
# retrieval-threads=2

#################################
# reuseport	Enable higher performance on compliant kernels by using SO_REUSEPORT allowing each receiver thread to open its own socket
#
# reuseport=no

#################################
# security-poll-suffix	Domain name from which to query security update notifications
#
# security-poll-suffix=secpoll.powerdns.com.

#################################
# send-root-referral	Send out old-fashioned root-referral instead of ServFail in case of no authority
#
# send-root-referral=no

#################################
# server-id	Returned when queried for 'server.id' TXT or NSID, defaults to hostname - disabled or custom
#
# server-id=

#################################
# setgid	If set, change group id to this gid for more security
#
# setgid=

#################################
# setuid	If set, change user id to this uid for more security
#
# setuid=

#################################
# signing-threads	Default number of signer threads to start
#
# signing-threads=3

#################################
# slave	Act as a slave
#
# slave=no

#################################
# slave-cycle-interval	Schedule slave freshness checks once every .. seconds
#
# slave-cycle-interval=60

#################################
# slave-renotify	If we should send out notifications for slaved updates
#
# slave-renotify=no

#################################
# soa-expire-default	Default SOA expire
#
# soa-expire-default=604800

#################################
# soa-minimum-ttl	Default SOA minimum ttl
#
# soa-minimum-ttl=3600

#################################
# soa-refresh-default	Default SOA refresh
#
# soa-refresh-default=10800

#################################
# soa-retry-default	Default SOA retry
#
# soa-retry-default=3600

#################################
# socket-dir	Where the controlsocket will live
#
socket-dir=/tmp/pdns

#################################
# tcp-control-address	If set, PowerDNS can be controlled over TCP on this address
#
# tcp-control-address=

#################################
# tcp-control-port	If set, PowerDNS can be controlled over TCP on this address
#
# tcp-control-port=53000

#################################
# tcp-control-range	If set, remote control of PowerDNS is possible over these networks only
#
# tcp-control-range=127.0.0.0/8, 10.0.0.0/8, 192.168.0.0/16, 172.16.0.0/12, ::1/128, fe80::/10

#################################
# tcp-control-secret	If set, PowerDNS can be controlled over TCP after passing this secret
#
# tcp-control-secret=

#################################
# traceback-handler	Enable the traceback handler (Linux only)
#
# traceback-handler=yes

#################################
# trusted-notification-proxy	IP address of incoming notification proxy
#
# trusted-notification-proxy=

#################################
# udp-truncation-threshold	Maximum UDP response size before we truncate
#
# udp-truncation-threshold=1680

#################################
# version-string	PowerDNS version in packets - full, anonymous, powerdns or custom
#
# version-string=full

#################################
# webserver	Start a webserver for monitoring
#
# webserver=no

#################################
# webserver-address	IP Address of webserver to listen on
#
# webserver-address=127.0.0.1

#################################
# webserver-allow-from	Webserver access is only allowed from these subnets
#
# webserver-allow-from=0.0.0.0/0,::/0

#################################
# webserver-password	Password required for accessing the webserver
#
# webserver-password=

#################################
# webserver-port	Port of webserver to listen on
#
# webserver-port=8081

#################################
# webserver-print-arguments	If the webserver should print arguments
#
# webserver-print-arguments=no



godbc-activate-domain-key-query=update cryptokeys set active=1 where domain_id=(select id from domains where name=:domain) and  cryptokeys.id=:key_id
godbc-add-domain-key-query=insert into cryptokeys (domain_id, flags, active, content) select id, :flags,:active, :content from domains where name=:domain
godbc-any-id-query=SELECT content,ttl,prio,type,domain_id,disabled,name,auth FROM records WHERE disabled=0 and name=:qname and domain_id=:domain_id
godbc-any-query=SELECT content,ttl,prio,type,domain_id,disabled,name,auth FROM records WHERE disabled=0 and name=:qname
godbc-basic-query=SELECT content,ttl,prio,type,domain_id,disabled,name,auth FROM records WHERE disabled=0 and type=:qtype and name=:qname
godbc-clear-domain-all-keys-query=delete from cryptokeys where domain_id=(select id from domains where name=:domain)
godbc-clear-domain-all-metadata-query=delete from domainmetadata where domain_id=(select id from domains where name=:domain)
godbc-clear-domain-metadata-query=delete from domainmetadata where domain_id=(select id from domains where name=:domain) and domainmetadata.kind=:kind
godbc-deactivate-domain-key-query=update cryptokeys set active=0 where domain_id=(select id from domains where name=:domain) and  cryptokeys.id=:key_id
godbc-delete-comment-rrset-query=DELETE FROM comments WHERE domain_id=:domain_id AND name=:qname AND type=:qtype
godbc-delete-comments-query=DELETE FROM comments WHERE domain_id=:domain_id
godbc-delete-domain-query=delete from domains where name=:domain
godbc-delete-empty-non-terminal-query=delete from records where domain_id=:domain_id and name=:qname and type is null
godbc-delete-names-query=delete from records where domain_id=:domain_id and name=:qname
godbc-delete-rrset-query=delete from records where domain_id=:domain_id and name=:qname and type=:qtype
godbc-delete-tsig-key-query=delete from tsigkeys where name=:key_name
godbc-delete-zone-query=delete from records where domain_id=:domain_id
godbc-get-all-domain-metadata-query=select kind,content from domains, domainmetadata where domainmetadata.domain_id=domains.id and name=:domain
godbc-get-all-domains-query=select domains.id, domains.name, records.content, domains.type, domains.master, domains.notified_serial, domains.last_check, domains.account from domains LEFT JOIN records ON records.domain_id=domains.id AND records.type='SOA' AND records.name=domains.name WHERE records.disabled=0 OR :include_disabled
godbc-get-domain-metadata-query=select content from domains, domainmetadata where domainmetadata.domain_id=domains.id and name=:domain and domainmetadata.kind=:kind
godbc-get-order-after-query=select min(ordername) from records where disabled=0 and ordername > :ordername and domain_id=:domain_id and ordername is not null
godbc-get-order-before-query=select ordername, name from records where disabled=0 and ordername <= :ordername and domain_id=:domain_id and ordername is not null order by 1 desc limit 1
godbc-get-order-first-query=select ordername, name from records where disabled=0 and domain_id=:domain_id and ordername is not null order by 1 asc limit 1
godbc-get-order-last-query=select ordername, name from records where disabled=0 and ordername != '' and domain_id=:domain_id and ordername is not null order by 1 desc limit 1
godbc-get-tsig-key-query=select algorithm, secret from tsigkeys where name=:key_name
godbc-get-tsig-keys-query=select name,algorithm, secret from tsigkeys
godbc-id-query=SELECT content,ttl,prio,type,domain_id,disabled,name,auth FROM records WHERE disabled=0 and type=:qtype and name=:qname and domain_id=:domain_id
godbc-info-all-master-query=select id,name,master,last_check,notified_serial,type from domains where type='MASTER'
godbc-info-all-slaves-query=select id,name,master,last_check,type from domains where type='SLAVE'
godbc-info-zone-query=select id,name,master,last_check,notified_serial,type,account from domains where name=:domain
godbc-insert-comment-query=INSERT INTO comments (domain_id, name, type, modified_at, account, comment) VALUES (:domain_id, :qname, :qtype, :modified_at, :account, :content)
godbc-insert-empty-non-terminal-query=insert into records (domain_id,name,type,disabled,auth) values (:domain_id,:qname,null,0,'1')
godbc-insert-ent-order-query=insert into records (type,domain_id,disabled,name,ordername,auth) values (null,:domain_id,0,:qname,:ordername,:auth)
godbc-insert-ent-query=insert into records (type,domain_id,disabled,name,auth) values (null,:domain_id,0,:qname,:auth)
godbc-insert-record-order-query=insert into records (content,ttl,prio,type,domain_id,disabled,name,ordername,auth) values (:content,:ttl,:priority,:qtype,:domain_id,:disabled,:qname,:ordername,:auth)
godbc-insert-record-query=insert into records (content,ttl,prio,type,domain_id,disabled,name,auth) values (:content,:ttl,:priority,:qtype,:domain_id,:disabled,:qname,:auth)
godbc-insert-slave-query=insert into domains (type,name,master,account) values('SLAVE',:domain,:masters,:account)
godbc-insert-zone-query=insert into domains (type,name) values('NATIVE',:domain)
godbc-list-comments-query=SELECT domain_id,name,type,modified_at,account,comment FROM comments WHERE domain_id=:domain_id
godbc-list-domain-keys-query=select cryptokeys.id, flags, active, content from domains, cryptokeys where cryptokeys.domain_id=domains.id and name=:domain
godbc-list-query=SELECT content,ttl,prio,type,domain_id,disabled,name,auth FROM records WHERE (disabled=0 OR :include_disabled) and domain_id=:domain_id order by name, type
godbc-list-subzone-query=SELECT content,ttl,prio,type,domain_id,disabled,name,auth FROM records WHERE disabled=0 and (name=:zone OR name like :wildzone) and domain_id=:domain_id
godbc-master-zone-query=select master from domains where name=:domain and type='SLAVE'
godbc-nullify-ordername-and-auth-query=update records set ordername=NULL,auth=0 where name=:qname and type=:qtype and domain_id=:domain_id and disabled=0
godbc-nullify-ordername-and-update-auth-query=update records set ordername=NULL,auth=:auth where domain_id=:domain_id and name=:qname and disabled=0
godbc-remove-domain-key-query=delete from cryptokeys where domain_id=(select id from domains where name=:domain) and cryptokeys.id=:key_id
godbc-remove-empty-non-terminals-from-zone-query=delete from records where domain_id=:domain_id and type is null
godbc-set-auth-on-ds-record-query=update records set auth=1 where domain_id=:domain_id and name=:qname and type='DS' and disabled=0
godbc-set-domain-metadata-query=insert into domainmetadata (domain_id, kind, content) select id, :kind, :content from domains where name=:domain
godbc-set-order-and-auth-query=update records set ordername=:ordername,auth=:auth where name=:qname and domain_id=:domain_id and disabled=0
godbc-set-tsig-key-query=replace into tsigkeys (name,algorithm,secret) values(:key_name,:algorithm,:content)
godbc-supermaster-name-to-ips=select ip,account from supermasters where nameserver=:nameserver and account=:account
godbc-supermaster-query=select account from supermasters where ip=:ip and nameserver=:nameserver
godbc-update-account-query=update domains set account=:account where name=:domain
godbc-update-kind-query=update domains set type=:kind where name=:domain
godbc-update-lastcheck-query=update domains set last_check=:last_check where id=:domain_id
godbc-update-master-query=update domains set master=:master where name=:domain
godbc-update-serial-query=update domains set notified_serial=:serial where id=:domain_id
godbc-zone-lastchange-query=select max(change_date) from records where domain_id=:domain_id
